// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db.proto

package db

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DB records.
type Records struct {
	Records              []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Records) Reset()         { *m = Records{} }
func (m *Records) String() string { return proto.CompactTextString(m) }
func (*Records) ProtoMessage()    {}
func (*Records) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{0}
}

func (m *Records) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Records.Unmarshal(m, b)
}
func (m *Records) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Records.Marshal(b, m, deterministic)
}
func (m *Records) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Records.Merge(m, src)
}
func (m *Records) XXX_Size() int {
	return xxx_messageInfo_Records.Size(m)
}
func (m *Records) XXX_DiscardUnknown() {
	xxx_messageInfo_Records.DiscardUnknown(m)
}

var xxx_messageInfo_Records proto.InternalMessageInfo

func (m *Records) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

// DB record which contains index and value.
type Record struct {
	Index                int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value                int32    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{1}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Record) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// The value of record.
type Value struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_8817812184a13374, []int{2}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Records)(nil), "db.Records")
	proto.RegisterType((*Record)(nil), "db.Record")
	proto.RegisterType((*Value)(nil), "db.Value")
}

func init() {
	proto.RegisterFile("db.proto", fileDescriptor_8817812184a13374)
}

var fileDescriptor_8817812184a13374 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x49, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0x49, 0x52, 0xd2, 0xe7, 0x62, 0x0f, 0x4a, 0x4d, 0xce,
	0x2f, 0x4a, 0x29, 0x16, 0x52, 0xe1, 0x62, 0x2f, 0x82, 0x30, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8,
	0x8d, 0xb8, 0xf4, 0x52, 0x92, 0xf4, 0x20, 0xb2, 0x41, 0x30, 0x29, 0x25, 0x13, 0x2e, 0x36, 0x88,
	0x90, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e, 0x4a, 0x6a, 0x85, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b,
	0x10, 0x84, 0x03, 0x12, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x82, 0x88, 0x82, 0x39, 0x4a,
	0xb2, 0x5c, 0xac, 0x61, 0x20, 0x06, 0x42, 0x9a, 0x11, 0x49, 0xda, 0xc8, 0x8f, 0x8b, 0xc9, 0xc5,
	0x49, 0x48, 0x89, 0x8b, 0x2d, 0x38, 0x35, 0xb1, 0x28, 0x39, 0x43, 0x88, 0x13, 0x64, 0x33, 0x58,
	0x83, 0x14, 0x37, 0xc2, 0x11, 0xc5, 0x4a, 0x0c, 0x42, 0x2a, 0x5c, 0x6c, 0xa1, 0x05, 0x29, 0x89,
	0x25, 0xa9, 0x42, 0xc8, 0x12, 0x68, 0xaa, 0x92, 0xd8, 0xc0, 0x1e, 0x34, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x6e, 0xe0, 0x52, 0x09, 0xec, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DBClient is the client API for DB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DBClient interface {
	// Search record.
	Search(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Records, error)
	// Update record.
	Update(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error)
}

type dBClient struct {
	cc grpc.ClientConnInterface
}

func NewDBClient(cc grpc.ClientConnInterface) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) Search(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/db.DB/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Update(ctx context.Context, in *Records, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, "/db.DB/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServer is the server API for DB service.
type DBServer interface {
	// Search record.
	Search(context.Context, *Value) (*Records, error)
	// Update record.
	Update(context.Context, *Records) (*Records, error)
}

// UnimplementedDBServer can be embedded to have forward compatible implementations.
type UnimplementedDBServer struct {
}

func (*UnimplementedDBServer) Search(ctx context.Context, req *Value) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedDBServer) Update(ctx context.Context, req *Records) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterDBServer(s *grpc.Server, srv DBServer) {
	s.RegisterService(&_DB_serviceDesc, srv)
}

func _DB_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DB/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Search(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DB/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Update(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

var _DB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "db.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _DB_Search_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DB_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
